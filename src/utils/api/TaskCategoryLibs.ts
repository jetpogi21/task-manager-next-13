//Generated by WriteToModellibs_ts - ModelLibs.ts
import { TaskCategoryFormikShape } from "@/interfaces/TaskCategoryInterfaces";
import { TaskCategory } from "@/models/TaskCategoryModel";
import { Op } from "sequelize";
import { Transaction } from "sequelize";

interface ITaskCategory
  extends Omit<TaskCategoryFormikShape, "touched" | "index"> {}

//Reusable functions
export const createTaskCategory = async (
  taskCategory: ITaskCategory,
  t: Transaction
) => {
  return await TaskCategory.create(
    {
      //Generated by GetAllFieldsToUpdateBySeqModel
      name: taskCategory.name!,
    },
    { transaction: t }
  );
};

export const updateTaskCategory = async (
  taskCategory: ITaskCategory,
  primaryKey: keyof ITaskCategory,
  t: Transaction,
  primaryKeyValue?: string | number
) => {
  await TaskCategory.update(
    {
      //Generated by GetAllFieldsToUpdateBySeqModel
      name: taskCategory.name!,
    },
    {
      where: { [primaryKey]: primaryKeyValue || taskCategory[primaryKey] },
      transaction: t,
      individualHooks: true,
    }
  );
};

export const deleteTaskCategories = async (
  primaryKey: keyof Omit<TaskCategoryFormikShape, "touched">,
  deletedIds: string[] | number[],
  t: Transaction
) => {
  await TaskCategory.destroy({
    where: { [primaryKey]: { [Op.in]: deletedIds } },
    transaction: t,
  });
};
