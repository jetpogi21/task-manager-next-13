//Generated by WriteToModellibs_ts - ModelLibs.ts
import { TaskIntervalFormikShape } from "@/interfaces/TaskIntervalInterfaces";
import { TaskInterval } from "@/models/TaskIntervalModel";
import { PRIMARY_KEY } from "@/utils/constants/TaskIntervalConstants";
import { Op } from "sequelize";
import { Transaction } from "sequelize";

interface ITaskInterval
  extends Omit<TaskIntervalFormikShape, "touched" | "index"> {}

//Reusable functions
export const createTaskInterval = async (
  taskInterval: Omit<ITaskInterval, typeof PRIMARY_KEY>,
  t: Transaction
) => {
  return await TaskInterval.create(
    {
      //Generated by GetAllFieldsToUpdateBySeqModel
      name: taskInterval.name!,
    },
    { transaction: t }
  );
};

export const updateTaskInterval = async (
  taskInterval: ITaskInterval,
  primaryKey: keyof ITaskInterval,
  t: Transaction,
  primaryKeyValue?: string | number
) => {
  await TaskInterval.update(
    {
      //Generated by GetAllFieldsToUpdateBySeqModel
      name: taskInterval.name!,
    },
    {
      where: { [primaryKey]: primaryKeyValue || taskInterval[primaryKey] },
      transaction: t,
      individualHooks: true,
    }
  );
};

export const deleteTaskIntervals = async (
  primaryKey: keyof Omit<TaskIntervalFormikShape, "touched">,
  deletedIds: string[] | number[],
  t: Transaction
) => {
  await TaskInterval.destroy({
    where: { [primaryKey]: { [Op.in]: deletedIds } },
    transaction: t,
  });
};
