//Generated by WriteToModellibs_ts - ModelLibs.ts
import { TaskTemplateFormikShape } from "@/interfaces/TaskTemplateInterfaces";
import { TaskTemplate } from "@/models/TaskTemplateModel";
import { Op } from "sequelize";
import { Transaction } from "sequelize";

//Reusable functions
export const createTaskTemplate = async (
  taskTemplate: Omit<TaskTemplateFormikShape, "touched" | "index" | "id">,
  t: Transaction
) => {
  return await TaskTemplate.create(
    {
      //Generated by GetAllFieldsToUpdateBySeqModel
      taskCategoryID: parseInt(taskTemplate.taskCategoryID as string),
      taskIntervalID: parseInt(taskTemplate.taskIntervalID as string),
      description: taskTemplate.description!,
      isSuspended: taskTemplate.isSuspended!,
    },
    { transaction: t }
  );
};

export const updateTaskTemplate = async (
  taskTemplate: Omit<TaskTemplateFormikShape, "touched" | "index">,
  primaryKey: keyof Omit<TaskTemplateFormikShape, "touched" | "index">,
  t: Transaction,
  primaryKeyValue?: string | number
) => {
  await TaskTemplate.update(
    {
      //Generated by GetAllFieldsToUpdateBySeqModel
      taskCategoryID: parseInt(taskTemplate.taskCategoryID as string),
      taskIntervalID: parseInt(taskTemplate.taskIntervalID as string),
      description: taskTemplate.description!,
      isSuspended: taskTemplate.isSuspended!,
    },
    {
      where: { [primaryKey]: primaryKeyValue || taskTemplate[primaryKey] },
      transaction: t,
      individualHooks: true,
    }
  );
};

export const deleteTaskTemplates = async (
  primaryKey: keyof Omit<TaskTemplateFormikShape, "touched">,
  deletedIds: string[] | number[],
  t: Transaction
) => {
  await TaskTemplate.destroy({
    where: { [primaryKey]: { [Op.in]: deletedIds } },
    transaction: t,
  });
};
