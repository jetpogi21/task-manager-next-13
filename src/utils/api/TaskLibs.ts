//Generated by WriteToModellibs_ts - ModelLibs.ts
import { TaskFormikShape } from "@/interfaces/TaskInterfaces";
import { Task } from "@/models/TaskModel";
import { Op } from "sequelize";
import { Transaction } from "sequelize";

//Reusable functions
export const createTask = async (
  task: Omit<TaskFormikShape, "touched" | "index" | "id">,
  t: Transaction
) => {
  return await Task.create(
    {
      //Generated by GetAllFieldsToUpdateBySeqModel
      taskCategoryID: parseInt(task.taskCategoryID as string),
      taskIntervalID: parseInt(task.taskIntervalID as string),
      description: task.description!,
      taskTemplateID: task.taskTemplateID
        ? parseInt(task.taskTemplateID as string)
        : null,
      date: task.date!,
      targetDate: task.targetDate!,
      finishDateTime: task.finishDateTime ? task.finishDateTime! : null,
      isFinished: task.isFinished!,
    },
    { transaction: t }
  );
};

export const updateTask = async (
  task: Omit<TaskFormikShape, "touched" | "index">,
  primaryKey: keyof Omit<TaskFormikShape, "touched" | "index">,
  t: Transaction,
  primaryKeyValue?: string | number
) => {
  await Task.update(
    {
      //Generated by GetAllFieldsToUpdateBySeqModel
      taskCategoryID: parseInt(task.taskCategoryID as string),
      taskIntervalID: parseInt(task.taskIntervalID as string),
      description: task.description!,
      taskTemplateID: task.taskTemplateID
        ? parseInt(task.taskTemplateID as string)
        : null,
      date: task.date!,
      targetDate: task.targetDate!,
      finishDateTime: task.finishDateTime ? task.finishDateTime! : null,
      isFinished: task.isFinished!,
    },
    {
      where: { [primaryKey]: primaryKeyValue || task[primaryKey] },
      transaction: t,
      individualHooks: true,
    }
  );
};

export const deleteTasks = async (
  primaryKey: keyof Omit<TaskFormikShape, "touched">,
  deletedIds: string[] | number[],
  t: Transaction
) => {
  await Task.destroy({
    where: { [primaryKey]: { [Op.in]: deletedIds } },
    transaction: t,
  });
};
