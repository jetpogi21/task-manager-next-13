//Generated by WriteToModellibs_ts - ModelLibs.ts
import { TaskNoteFormikShape } from "@/interfaces/TaskNoteInterfaces";
import { TaskNote } from "@/models/TaskNoteModel";
import { PRIMARY_KEY } from "@/utils/constants/TaskIntervalConstants";
import { Op } from "sequelize";
import { Transaction } from "sequelize";

interface ITaskNote
  extends Omit<
    TaskNoteFormikShape,
    | "touched"
    | "index"
    //Generated by GetAllOptionalFields
    //Generated by GetOptionalField - GetOptionalField
    | "note"
    //Generated by GetOptionalField - GetOptionalField
    | "file"
    //Generated by GetOptionalField - GetOptionalField
    | "fileSize"
    //Generated by GetOptionalField - GetOptionalField
    | "fileName"
  > {
  //Generated by GetAllOptionFieldTypes
  note?: string | null; //Generated by GetModelFieldType
  file?: string | null; //Generated by GetModelFieldType
  fileSize?: number | string | null; //Generated by GetModelFieldType
  fileName?: string | null; //Generated by GetModelFieldType
}

//Reusable functions
export const createTaskNote = async (
  taskNote: Omit<ITaskNote, typeof PRIMARY_KEY>,
  t: Transaction
) => {
  return await TaskNote.create(
    {
      //Generated by GetAllFieldsToUpdateBySeqModel
      note: taskNote.note ? taskNote.note! : null,
      taskID: parseInt(taskNote.taskID as string),
      file: taskNote.file ? taskNote.file! : null,
      fileSize: taskNote.fileSize
        ? parseInt(taskNote.fileSize as string)
        : null,
      fileName: taskNote.fileName ? taskNote.fileName! : null,
    },
    { transaction: t }
  );
};

export const updateTaskNote = async (
  taskNote: ITaskNote,
  primaryKey: keyof ITaskNote,
  t: Transaction,
  primaryKeyValue?: string | number
) => {
  await TaskNote.update(
    {
      //Generated by GetAllFieldsToUpdateBySeqModel
      note: taskNote.note ? taskNote.note! : null,
      taskID: parseInt(taskNote.taskID as string),
      file: taskNote.file ? taskNote.file! : null,
      fileSize: taskNote.fileSize
        ? parseInt(taskNote.fileSize as string)
        : null,
      fileName: taskNote.fileName ? taskNote.fileName! : null,
    },
    {
      where: { [primaryKey]: primaryKeyValue || taskNote[primaryKey] },
      transaction: t,
      individualHooks: true,
    }
  );
};

export const deleteTaskNotes = async (
  primaryKey: keyof Omit<TaskNoteFormikShape, "touched">,
  deletedIds: string[] | number[],
  t: Transaction
) => {
  await TaskNote.destroy({
    where: { [primaryKey]: { [Op.in]: deletedIds } },
    transaction: t,
  });
};
