//Generated by WriteToModellibs_ts - ModelLibs.ts
import { SubTaskFormikShape } from "@/interfaces/SubTaskInterfaces";
import { SubTask } from "@/models/SubTaskModel";
import { Op } from "sequelize";
import { Transaction } from "sequelize";

//Reusable functions
export const createSubTask = async (
  subTask: Omit<SubTaskFormikShape, "touched" | "index" | "id">,
  t: Transaction
) => {
  return await SubTask.create(
    {
      //Generated by GetAllFieldsToUpdateBySeqModel
      description: subTask.description!,
      priority: subTask.priority!,
      finishDateTime: subTask.finishDateTime ? subTask.finishDateTime! : null,
      taskID: parseInt(subTask.taskID as string),
    },
    { transaction: t }
  );
};

export const updateSubTask = async (
  subTask: Omit<SubTaskFormikShape, "touched" | "index">,
  primaryKey: keyof Omit<SubTaskFormikShape, "touched" | "index">,
  t: Transaction,
  primaryKeyValue?: string | number
) => {
  await SubTask.update(
    {
      //Generated by GetAllFieldsToUpdateBySeqModel
      description: subTask.description!,
      priority: subTask.priority!,
      finishDateTime: subTask.finishDateTime ? subTask.finishDateTime! : null,
      taskID: parseInt(subTask.taskID as string),
    },
    {
      where: { [primaryKey]: primaryKeyValue || subTask[primaryKey] },
      transaction: t,
      individualHooks: true,
    }
  );
};

export const deleteSubTasks = async (
  primaryKey: keyof Omit<SubTaskFormikShape, "touched">,
  deletedIds: string[] | number[],
  t: Transaction
) => {
  await SubTask.destroy({
    where: { [primaryKey]: { [Op.in]: deletedIds } },
    transaction: t,
  });
};
