//Generated by WriteToModellibs_ts - ModelLibs.ts
import { TaskTagFormikShape } from "@/interfaces/TaskTagInterfaces";
import { TaskTag } from "@/models/TaskTagModel";
import { Op } from "sequelize";
import { Transaction } from "sequelize";

//Reusable functions
export const createTaskTag = async (
  taskTag: Omit<TaskTagFormikShape, "touched" | "index" | "id">,
  t: Transaction
) => {
  return await TaskTag.create(
    {
      //Generated by GetAllFieldsToUpdateBySeqModel
      taskID: parseInt(taskTag.taskID as string),
      tagID: parseInt(taskTag.tagID as string),
    },
    { transaction: t }
  );
};

export const updateTaskTag = async (
  taskTag: Omit<TaskTagFormikShape, "touched" | "index">,
  primaryKey: keyof Omit<TaskTagFormikShape, "touched" | "index">,
  t: Transaction,
  primaryKeyValue?: string | number
) => {
  await TaskTag.update(
    {
      //Generated by GetAllFieldsToUpdateBySeqModel
      taskID: parseInt(taskTag.taskID as string),
      tagID: parseInt(taskTag.tagID as string),
    },
    {
      where: { [primaryKey]: primaryKeyValue || taskTag[primaryKey] },
      transaction: t,
      individualHooks: true,
    }
  );
};

export const deleteTaskTags = async (
  primaryKey: keyof Omit<TaskTagFormikShape, "touched">,
  deletedIds: string[] | number[],
  t: Transaction
) => {
  await TaskTag.destroy({
    where: { [primaryKey]: { [Op.in]: deletedIds } },
    transaction: t,
  });
};
