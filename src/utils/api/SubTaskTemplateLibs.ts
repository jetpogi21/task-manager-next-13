//Generated by WriteToModellibs_ts - ModelLibs.ts
import { SubTaskTemplateFormikShape } from "@/interfaces/SubTaskTemplateInterfaces";
import { SubTaskTemplate } from "@/models/SubTaskTemplateModel";
import { PRIMARY_KEY } from "@/utils/constants/TaskIntervalConstants";
import { Op } from "sequelize";
import { Transaction } from "sequelize";

interface ISubTaskTemplate
  extends Omit<SubTaskTemplateFormikShape, "touched" | "index"> {}

//Reusable functions
export const createSubTaskTemplate = async (
  subTaskTemplate: Omit<ISubTaskTemplate, typeof PRIMARY_KEY>,
  t: Transaction
) => {
  return await SubTaskTemplate.create(
    {
      //Generated by GetAllFieldsToUpdateBySeqModel
      description: subTaskTemplate.description!,
      priority: subTaskTemplate.priority!,
      taskTemplateID: parseInt(subTaskTemplate.taskTemplateID as string),
    },
    { transaction: t }
  );
};

export const updateSubTaskTemplate = async (
  subTaskTemplate: ISubTaskTemplate,
  primaryKey: keyof ISubTaskTemplate,
  t: Transaction,
  primaryKeyValue?: string | number
) => {
  await SubTaskTemplate.update(
    {
      //Generated by GetAllFieldsToUpdateBySeqModel
      description: subTaskTemplate.description!,
      priority: subTaskTemplate.priority!,
      taskTemplateID: parseInt(subTaskTemplate.taskTemplateID as string),
    },
    {
      where: { [primaryKey]: primaryKeyValue || subTaskTemplate[primaryKey] },
      transaction: t,
      individualHooks: true,
    }
  );
};

export const deleteSubTaskTemplates = async (
  primaryKey: keyof Omit<SubTaskTemplateFormikShape, "touched">,
  deletedIds: string[] | number[],
  t: Transaction
) => {
  await SubTaskTemplate.destroy({
    where: { [primaryKey]: { [Op.in]: deletedIds } },
    transaction: t,
  });
};
