//Generated by ImportCompleteModelFile
//Generated by GetCompleteModelFile

//Generated by GetModelImports
import {
  CreationOptional,
  DataTypes,
  InferAttributes,
  InferCreationAttributes,
  Model,
  Sequelize,
} from "sequelize";
import sequelize from "../config/db";
import { Task } from "./TaskModel";

//Generated by GetModelInterface
export default interface SubTask
  extends Model<InferAttributes<SubTask>, InferCreationAttributes<SubTask>> {
  id: CreationOptional<number>;
  description: string;
  priority: string;
  finishDateTime?: string | null;
  taskID: number;
}

//Generated by GetModelDefinition
export const SubTask = sequelize.define<SubTask>(
  "SubTask",
  //Generated by GetModelFieldsDictionary
  {
    id: {
      type: DataTypes.BIGINT,
      autoIncrement: true,
      primaryKey: true,
      field: "id",
    },
    description: {
      type: DataTypes.STRING(50),
      field: "description",
    },
    priority: {
      type: DataTypes.DECIMAL(4, 2),
      field: "priority",
    },
    finishDateTime: {
      type: DataTypes.DATE,
      allowNull: true,
      field: "finish_date_time",
    },
    taskID: {
      type: DataTypes.BIGINT,
      field: "task_id",
      //Generated by GetReferencesKeyForModelCreationMigration - references key for model creation
      references: {
        model: "taskmanager_task",
        key: "id",
      },
      onUpdate: "CASCADE",
      onDelete: "CASCADE",
    },
  },
  //Generated By GetModelOptionDict
  {
    name: { singular: "SubTask", plural: "SubTasks" },
    tableName: "taskmanager_subtask",
    timestamps: false,
  }
);

//Generated by GenerateSyncModel
export const SubTaskSync = async () => {
  try {
    await SubTask.sync({ alter: true });
    console.log("Sub Task table has been created!");
  } catch (error) {
    console.error(`Unable to create ${"Sub Task".toLowerCase()} table:`, error);
  }
};

//Generated by GenerateModelRelationship
Task.hasMany(SubTask, {
  foreignKey: "task_id",
  onDelete: "CASCADE",
  onUpdate: "CASCADE",
});
SubTask.belongsTo(Task, {
  foreignKey: "task_id",
  onDelete: "CASCADE",
  onUpdate: "CASCADE",
});
