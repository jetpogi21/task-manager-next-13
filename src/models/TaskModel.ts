//Generated by ImportCompleteModelFile
//Generated by GetCompleteModelFile

//Generated by GetModelImports
import {
  CreationOptional,
  DataTypes,
  InferAttributes,
  InferCreationAttributes,
  Model,
  Sequelize,
} from "sequelize";
import sequelize from "../config/db";
import { TaskCategory } from "./TaskCategoryModel";
import { TaskInterval } from "./TaskIntervalModel";
import { TaskTemplate } from "./TaskTemplateModel";

//Generated by GetModelInterface
export default interface Task
  extends Model<InferAttributes<Task>, InferCreationAttributes<Task>> {
  taskCategoryID: number;
  taskIntervalID: number;
  id: CreationOptional<number>;
  description: string;
  taskTemplateID?: number | null;
  date: string;
  targetDate: string;
  finishDateTime?: string | null;
  isFinished?: boolean;
  subTaskImported?: boolean;
}

//Generated by GetModelDefinition
export const Task = sequelize.define<Task>(
  "Task",
  //Generated by GetModelFieldsDictionary
  {
    id: {
      type: DataTypes.BIGINT,
      autoIncrement: true,
      primaryKey: true,
      field: "id",
    },
    description: {
      type: DataTypes.STRING(50),
      field: "description",
    },
    taskCategoryID: {
      type: DataTypes.BIGINT,
      field: "task_category_id",
      //Generated by GetReferencesKeyForModelCreationMigration - references key for model creation
      references: {
        model: "taskmanager_taskcategory",
        key: "id",
      },
      onUpdate: "CASCADE",
      onDelete: "CASCADE",
    },
    taskIntervalID: {
      type: DataTypes.BIGINT,
      field: "task_interval_id",
      //Generated by GetReferencesKeyForModelCreationMigration - references key for model creation
      references: {
        model: "taskmanager_taskinterval",
        key: "id",
      },
      onUpdate: "CASCADE",
      onDelete: "CASCADE",
    },
    taskTemplateID: {
      type: DataTypes.BIGINT,
      allowNull: true,
      field: "task_template_id",
      //Generated by GetReferencesKeyForModelCreationMigration - references key for model creation
      references: {
        model: "taskmanager_tasktemplate",
        key: "id",
      },
      onUpdate: "CASCADE",
      onDelete: "SET NULL",
    },
    date: {
      type: DataTypes.DATEONLY,
      field: "date",
    },
    targetDate: {
      type: DataTypes.DATEONLY,
      field: "target_date",
    },
    finishDateTime: {
      type: DataTypes.DATE,
      allowNull: true,
      field: "finish_date_time",
    },
    isFinished: {
      type: DataTypes.BOOLEAN,
      defaultValue: false,
      field: "is_finished",
    },
    subTaskImported: {
      type: DataTypes.BOOLEAN,
      defaultValue: false,
      field: "sub_task_imported",
    },
  },
  //Generated By GetModelOptionDict
  {
    name: { singular: "Task", plural: "Tasks" },
    tableName: "taskmanager_task",
    timestamps: false,
  }
);

//Generated by GenerateSyncModel
export const TaskSync = async () => {
  try {
    await Task.sync({ alter: true });
    console.log("Task table has been created!");
  } catch (error) {
    console.error(`Unable to create ${"Task".toLowerCase()} table:`, error);
  }
};

//Generated by GenerateModelRelationship
TaskCategory.hasMany(Task, {
  foreignKey: "task_category_id",
  onDelete: "CASCADE",
  onUpdate: "CASCADE",
});
Task.belongsTo(TaskCategory, {
  foreignKey: "task_category_id",
  onDelete: "CASCADE",
  onUpdate: "CASCADE",
});

//Generated by GenerateModelRelationship
TaskInterval.hasMany(Task, {
  foreignKey: "task_interval_id",
  onDelete: "CASCADE",
  onUpdate: "CASCADE",
});
Task.belongsTo(TaskInterval, {
  foreignKey: "task_interval_id",
  onDelete: "CASCADE",
  onUpdate: "CASCADE",
});

//Generated by GenerateModelRelationship
TaskTemplate.hasMany(Task, {
  foreignKey: "task_template_id",
  onDelete: "SET NULL",
  onUpdate: "CASCADE",
});
Task.belongsTo(TaskTemplate, {
  foreignKey: "task_template_id",
  onDelete: "SET NULL",
  onUpdate: "CASCADE",
});
