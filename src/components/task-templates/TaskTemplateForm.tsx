//Generated by WriteToModelform_tsx - ModelForm.tsx
"use client";
import {
  TaskTemplateFormFormikInitialValues,
  TaskTemplateModel,
  TaskTemplateSearchParams,
} from "@/interfaces/TaskTemplateInterfaces";
import {
  Form,
  Formik,
  FormikHelpers,
  FormikProps,
  useFormikContext,
} from "formik";
import React, { MouseEventHandler, useEffect, useRef, useState } from "react";
import { BasicModel } from "@/interfaces/GeneralInterfaces";
import {
  DEFAULT_FORM_VALUE,
  CONTROL_OPTIONS,
  PRIMARY_KEY,
} from "@/utils/constants/TaskTemplateConstants";
import { useListURLStore, useURL } from "@/hooks/useURL";
import FormikControl from "@/components/form/FormikControl";
import { Button } from "@/components/ui/Button";
import Breadcrumb from "@/components/ui/Breadcrumb";
import { sortData } from "@/utils/sort";
import { useTaskTemplateStore } from "@/hooks/task-templates/useTaskTemplateStore";
import { toast } from "@/hooks/use-toast";
import { useTaskTemplateQuery } from "@/hooks/task-templates/useTaskTemplateQuery";
import { convertArrayItemsToStrings } from "@/utils/utils";
import { TaskTemplateSchema } from "@/schema/TaskTemplateSchema";
import { Trash } from "lucide-react";
import { useTaskTemplateDeleteDialog } from "@/hooks/task-templates/useTaskTemplateDeleteDialog";
import { TaskTemplateDeleteDialog } from "@/components/task-templates/TaskTemplateDeleteDialog";
//Generated by GetAllModelFormRelatedConstantsImport
//Generated by GetModelFormRelatedConstantsImport - GetAllModelFormRelatedConstantsImport
import {
  PRIMARY_KEY as SUBTASKTEMPLATE_PRIMARYKEY,
  COLUMNS as SUBTASKTEMPLATE_COLUMNS,
  DEFAULT_FORM_VALUE as DEFAULT_SUBTASKTEMPLATE_FORM_VALUE,
  DEFAULT_SORT_BY as DEFAULT_SUBTASKTEMPLATE_SORT_BY,
} from "@/utils/constants/SubTaskTemplateConstants";
import { useSubTaskTemplateStore } from "@/hooks/sub-task-templates/useSubTaskTemplateStore";
import SubTaskTemplateSubform from "@/components/task-templates/SubTaskTemplateSubform";
//Generated by GetAllModelFormRequiredListImport

//Generated by GetModelFormRequiredListImport - GetModelFormRequiredListImport
import useTaskCategoryList from "@/hooks/task-categories/useTaskCategoryList";
//Generated by GetModelFormRequiredListImport - GetModelFormRequiredListImport
import useTaskIntervalList from "@/hooks/task-intervals/useTaskIntervalList";
//Generated by GetAllModelFormRequiredRightModelListImport

import { DndProvider } from "react-dnd";
import { HTML5Backend } from "react-dnd-html5-backend";
import { replaceHighestOrder } from "@/utils/utilities";

interface TaskTemplateFormProps {
  data: TaskTemplateModel | null;
  id: string;
}

const TaskTemplateForm: React.FC<TaskTemplateFormProps> = (prop) => {
  const { id } = prop;
  const { router, query, pathname } = useURL<TaskTemplateSearchParams>();

  //Local states
  const [mounted, setMounted] = useState(false);
  const [recordName, setRecordName] = useState(
    prop.data ? prop.data.id.toString() : "New Task Template"
  );

  const ref = useRef<any>(null);

  //Zustand variables
  const { isUpdating, setIsUpdating, hasUpdate, setHasUpdate } =
    useTaskTemplateStore((state) => ({
      isUpdating: state.isUpdating,
      setIsUpdating: state.setIsUpdating,
      hasUpdate: state.hasUpdate,
      setHasUpdate: state.setHasUpdate,
    }));

  const { setRecordsToDelete } = useTaskTemplateDeleteDialog((state) => ({
    setRecordsToDelete: state.setRecordsToDelete,
  }));

  const { listURL } = useListURLStore((state) => ({
    listURL: state.listURL,
  }));

  //Derive prev URL from the listURL
  const prevURL =
    listURL && listURL.includes("/task-templates") && listURL !== pathname
      ? listURL
      : "/task-templates";

  //Generated by GetAllRelatedModelSortFromStore
  const { sort: subTaskTemplateSort } = useSubTaskTemplateStore((state) => ({
    sort: state.sort,
  }));

  //Tanstack queries

  //Generated by GetAllRelatedRightModelListFromRelatedModel
  //Generated by GetRelatedRightModelListFromRelatedModel - GetRelatedRightModelListFromRelatedModel
  const taskCategoryPlaceholder: BasicModel[] = [];
  if (prop.data) {
    //Generated by GetAllRightModelPushPlaceholder
    //Generated by GetRightModelPushPlaceholder - GetRightModelPushPlaceholder
    prop.data.taskCategoryID &&
      !taskCategoryPlaceholder.some(
        (item) => item.id === prop.data?.taskCategoryID
      ) &&
      taskCategoryPlaceholder.push({
        id: prop.data.taskCategoryID,
        name: prop.data.TaskCategory.name,
      });
  }
  const { data: taskCategoryList } = useTaskCategoryList({
    placeholderData: taskCategoryPlaceholder,
  });
  //Generated by GetRelatedRightModelListFromRelatedModel - GetRelatedRightModelListFromRelatedModel
  const taskIntervalPlaceholder: BasicModel[] = [];
  if (prop.data) {
    //Generated by GetAllRightModelPushPlaceholder
    //Generated by GetRightModelPushPlaceholder - GetRightModelPushPlaceholder
    prop.data.taskIntervalID &&
      !taskIntervalPlaceholder.some(
        (item) => item.id === prop.data?.taskIntervalID
      ) &&
      taskIntervalPlaceholder.push({
        id: prop.data.taskIntervalID,
        name: prop.data.TaskInterval.name,
      });
  }
  const { data: taskIntervalList } = useTaskIntervalList({
    placeholderData: taskIntervalPlaceholder,
  });
  //Generated by GetAllRelatedListFromRightRelatedModel

  const { taskTemplateMutation, taskTemplateQuery } = useTaskTemplateQuery(id, {
    enabled: mounted && id !== "new",
    initialData: prop.data,
  });

  const taskTemplate = taskTemplateQuery.data;

  const initialValues: TaskTemplateFormFormikInitialValues = {
    ...DEFAULT_FORM_VALUE,
    //Generated by GetAllRightModelDefaultList
    //Generated by GetRightModelDefaultList - GetRightModelDefaultList
    taskCategoryID:
      taskCategoryList && taskCategoryList.length > 0
        ? taskCategoryList[0].id
        : "",
    //Generated by GetRightModelDefaultList - GetRightModelDefaultList
    taskIntervalID:
      taskIntervalList && taskIntervalList.length > 0
        ? taskIntervalList[0].id
        : "",

    //Generated by GetAllRelatedModelEmptyArray
    //Generated by GetRelatedModelEmptyArray - GetRelatedModelEmptyArray
    SubTaskTemplates: [{ ...DEFAULT_SUBTASKTEMPLATE_FORM_VALUE, index: 0 }],
  };

  if (taskTemplate) {
    for (const key in initialValues) {
      if (
        taskTemplate.hasOwnProperty(key) &&
        initialValues.hasOwnProperty(key)
      ) {
        //@ts-ignore
        //prettier-ignore
        initialValues[key] = taskTemplate[key] === null ? "" : taskTemplate[key];
      }
    }

    //Generated by GetAllRelatedModelMapToInitialValue
    //Generated by GetRelatedModelMapToInitialValue - RelatedModelMapToInitialValue
    initialValues.SubTaskTemplates = taskTemplate.SubTaskTemplates.map(
      (item, index) => ({
        ...item,
        touched: false,
        index,
      })
    );
  }

  //Generated by GetAllRelatedModelSortInitialValue
  //Generated by GetRelatedModelSortInitialValue - GetRelatedModelSortInitialValue
  //Sort the SubTaskTemplates array value
  initialValues.SubTaskTemplates.sort((a, b) => {
    const desc = DEFAULT_SUBTASKTEMPLATE_SORT_BY.includes("-");
    const field = desc
      ? DEFAULT_SUBTASKTEMPLATE_SORT_BY.substring(1)
      : DEFAULT_SUBTASKTEMPLATE_SORT_BY;
    return sortData(
      a,
      b,
      desc,
      field,
      SUBTASKTEMPLATE_COLUMNS,
      SUBTASKTEMPLATE_PRIMARYKEY
    );
  });

  initialValues.SubTaskTemplates.push({
    ...DEFAULT_SUBTASKTEMPLATE_FORM_VALUE,
    index: initialValues.SubTaskTemplates.length + 1,
    taskTemplateID: taskTemplate ? taskTemplate.id : "",
    //Generated by GetRelatedModelReplaceHighestOrder
    //@ts-ignore
    priority: taskTemplate
      ? //@ts-ignore
        replaceHighestOrder(taskTemplate.SubTaskTemplates, "priority")
      : "0",
  });

  const handleFocus = () => {
    ref && ref.current && ref.current.focus();
  };

  const handleHasUdpate = () => {
    setHasUpdate(true);
  };

  const handleFormikSubmit = (
    values: TaskTemplateFormFormikInitialValues,
    formik: FormikHelpers<TaskTemplateFormFormikInitialValues>
  ) => {
    //@ts-ignore
    const addNew: boolean = values.addNew;
    setIsUpdating(true);

    const goToNewRecord = () => {
      formik.setValues({
        ...DEFAULT_FORM_VALUE,

        //Generated by GetAllRelatedModelEmptyArray
        //Generated by GetRelatedModelEmptyArray - GetRelatedModelEmptyArray
        SubTaskTemplates: [{ ...DEFAULT_SUBTASKTEMPLATE_FORM_VALUE, index: 0 }],
      });
      window.history.pushState(
        {},
        "",
        `${window.location.origin}/task-templates/new`
      );
      setRecordName("New Task Template");

      handleFocus();
    };

    if (hasUpdate) {
      const payload = {
        ...values,
        //Generated by GetAllRelatedPayloadAssignment
        //Generated by GetRelatedPayloadAssignment - GetRelatedPayloadAssignment
        SubTaskTemplates: values.SubTaskTemplates.map((item, index) => ({
          ...item,
          index,
        })).filter((item) => item.touched),
      };

      taskTemplateMutation
        .mutateAsync(payload)
        .then((data) => {
          if (addNew) {
            goToNewRecord();
          } else {
            if (data.id) {
              formik.setFieldValue("id", data.id);
            }

            if (data.id) {
              window.history.pushState(
                {},
                "",
                `${window.location.origin}/task-templates/${data.id}`
              );
            }

            setRecordName(data.id ? data.id.toString() : values.id.toString());

            //Generated by GetAllReplaceEmptyRelatedModel
            //Generated by GetReplaceEmptyRelatedModel - GetReplaceEmptyRelatedModel
            //Replace the id fields of the indexes from the SubTaskTemplates
            const newSubTaskTemplates = values.SubTaskTemplates.map(
              (item, index) => ({
                ...item,
                id:
                  data.SubTaskTemplates.find((item) => item.index === index)
                    ?.id || item.id,
              })
            ).sort((a, b) => {
              const desc = subTaskTemplateSort.includes("-");
              const field = desc
                ? subTaskTemplateSort.substring(1)
                : subTaskTemplateSort;

              return sortData(a, b, desc, field, SUBTASKTEMPLATE_COLUMNS);
            });

            formik.setFieldValue("SubTaskTemplates", newSubTaskTemplates);
          }

          toast({
            description: "Task Template list updated successfully",
            variant: "success",
            duration: 2000,
          });
          setIsUpdating(false);
          router.replace(prevURL);
        })
        .catch((err) => {
          setIsUpdating(false);
          console.log(err);
        });
    } else {
      if (addNew) {
        goToNewRecord();
      }
      setIsUpdating(false);
    }
  };

  const renderFormik = (
    formik: FormikProps<TaskTemplateFormFormikInitialValues>
  ) => {
    const handleSubmitClick: MouseEventHandler = (e) => {
      e.preventDefault();
      formik.submitForm();
    };

    return (
      <Form
        className="flex flex-col flex-1 h-full gap-4"
        autoComplete="off"
      >
        {/* Generated by GetAllFormikControls */}
        {/* Generated by GetInputFormControl - Input Form Control */}
        <FormikControl
          name="description"
          type="Text"
          label="Description"
          containerClassNames={["w-full"]}
          ref={ref}
          setFocusOnLoad={true}
          setHasUpdate={handleHasUdpate}
          nullAllowed={false}
        />
        {/* Generated by GetSelectFormControl - Select Form Control */}
        <FormikControl
          name="taskCategoryID"
          options={taskCategoryList || []}
          label="Task Category"
          type="Select"
          showLabel={true}
          allowBlank={false}
          containerClassNames={["w-full"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetSelectFormControl - Select Form Control */}
        <FormikControl
          name="taskIntervalID"
          options={taskIntervalList || []}
          label="Task Interval"
          type="Select"
          showLabel={true}
          allowBlank={false}
          containerClassNames={["w-full"]}
          setHasUpdate={handleHasUdpate}
        />
        {/* Generated by GetInputFormControl - Input Form Control */}
        <FormikControl
          name="isSuspended"
          type="Checkbox"
          label="Is Suspended"
          containerClassNames={["w-full"]}
          setHasUpdate={handleHasUdpate}
          nullAllowed={false}
        />
        {/* Generated by GetAllRelatedSubforms */}
        {/* Generated by GetRelatedSubform - GetRelatedSubform */}
        <DndProvider backend={HTML5Backend}>
          <SubTaskTemplateSubform formik={formik} />
        </DndProvider>

        <div className="flex gap-2 mt-auto">
          <Button
            type="button"
            size={"sm"}
            variant={"secondary"}
            onClick={(e) => {
              formik.setFieldValue("addNew", true);
              handleSubmitClick(e);
            }}
            isLoading={isUpdating}
          >
            Save & Add New
          </Button>
          <Button
            type="button"
            size={"sm"}
            variant={"secondary"}
            onClick={(e) => {
              formik.setFieldValue("addNew", false);
              handleSubmitClick(e);
            }}
            isLoading={isUpdating}
          >
            Save
          </Button>
          <Button
            type="button"
            size={"sm"}
            variant={"ghost"}
            onClick={(e) => {
              e.preventDefault();
              router.push(prevURL);
            }}
          >
            Back
          </Button>
          {id !== "new" ||
            (recordName !== "New Task Template" && (
              <Button
                type="button"
                size={"sm"}
                variant={"destructive"}
                onClick={(e) => {
                  setRecordsToDelete([formik.values[PRIMARY_KEY].toString()]);
                }}
                className={"ml-auto"}
              >
                <Trash className="w-4 h-4 mr-2" />
                Delete
              </Button>
            ))}
        </div>
      </Form>
    );
  };

  useEffect(() => {
    setMounted(true);
    handleFocus();
  }, []);

  return mounted ? (
    <>
      <Breadcrumb
        links={[
          { name: "Task Templates", href: prevURL },
          { name: recordName, href: "" },
        ]}
      />
      <Formik
        initialValues={initialValues}
        onSubmit={handleFormikSubmit}
        validateOnChange={false}
        validateOnBlur={false}
        enableReinitialize={true}
        validationSchema={TaskTemplateSchema}
      >
        {renderFormik}
      </Formik>
      <TaskTemplateDeleteDialog
        onSuccess={() => {
          toast({
            description: "Task Template successfully deleted.",
            variant: "success",
            duration: 4000,
          });
          router.replace(prevURL);
        }}
      />
    </>
  ) : null;
};

export default TaskTemplateForm;
