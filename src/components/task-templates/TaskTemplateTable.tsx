//Generated by WriteToModeltable_tsx - ModelTable.tsx for Table 9/18
"use client";
import React, { useEffect } from "react";
import { useTaskTemplateStore } from "@/hooks/task-templates/useTaskTemplateStore";
import TaskTemplateDataTable from "@/components/task-templates/TaskTemplateDataTable";
import { useTaskTemplatePageParams } from "@/hooks/task-templates/useTaskTemplatePageParams";
import {
  TaskTemplateModel,
  TaskTemplateSearchParams,
} from "@/interfaces/TaskTemplateInterfaces";
import { useQueryClient, InfiniteData } from "@tanstack/react-query";
import { useModelsQuery } from "@/hooks/useModelQuery";
import { TaskTemplateConfig } from "@/utils/config/TaskTemplateConfig";
import { GetModelsResponse } from "@/interfaces/GeneralInterfaces";
import { useModelPageParams } from "@/hooks/useModelPageParams";

const TaskTemplateTable: React.FC = () => {
  const config = TaskTemplateConfig;
  const { params } = useModelPageParams<TaskTemplateSearchParams>(config);
  const queryClient = useQueryClient();

  const [mounted, setMounted] = React.useState(false);

  //Store Variables
  const page = useTaskTemplateStore((state) => state.page);
  const setRecordCount = useTaskTemplateStore((state) => state.setRecordCount);
  const fetchCount = useTaskTemplateStore((state) => state.fetchCount);
  const setFetchCount = useTaskTemplateStore((state) => state.setFetchCount);
  const previousData = useTaskTemplateStore((state) => state.currentData);
  const setCurrentData = useTaskTemplateStore((state) => state.setCurrentData);
  const setQueryResponse = useTaskTemplateStore(
    (state) => state.setQueryResponse
  );
  const setRefetchQuery = useTaskTemplateStore(
    (state) => state.setRefetchQuery
  );

  const queryParams = params;

  const useTaskTemplateSearchQuery = () =>
    //@ts-ignore
    useModelsQuery<TaskTemplateModel>(config, {
      ...queryParams,
      fetchCount: fetchCount.toString(),
    });

  const { data, refetch, isFetching, isLoading } = useTaskTemplateSearchQuery();

  const currentPageData: GetModelsResponse<TaskTemplateModel> | null = data
    ? data.pages[page - (isFetching ? 2 : 1)]
    : null;
  const currentData: TaskTemplateModel[] =
    currentPageData === null ? previousData : currentPageData?.rows || [];

  //Client functions
  const refetchQuery = (idx: number) => {
    queryClient.setQueryData(
      [config.modelPath, { ...queryParams }],
      (
        data: InfiniteData<GetModelsResponse<TaskTemplateModel>> | undefined
      ) => {
        return data
          ? {
              pages: data.pages.slice(0, idx + 1),
              pageParams: data.pageParams.slice(0, idx + 1),
            }
          : undefined;
      }
    );
    refetch({
      refetchPage(_, index) {
        return index === idx;
      },
    });
  };

  useEffect(() => {
    setMounted(true);
    return () => {
      setMounted(false);
    };
  }, []);

  useEffect(() => {
    setQueryResponse(useTaskTemplateSearchQuery);
    if (currentPageData?.count !== undefined) {
      setRecordCount(currentPageData?.count || 0);
    }
    setFetchCount(!fetchCount);
    setCurrentData(currentData);
    setRefetchQuery(refetchQuery);
  }, [currentPageData?.count, data, page]);

  return (
    mounted && (
      <TaskTemplateDataTable taskTemplateQuery={useTaskTemplateSearchQuery} />
    )
  );
};

export default TaskTemplateTable;
