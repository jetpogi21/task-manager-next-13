//Generated by WriteToModeltable_tsx - ModelTable.tsx for Table 9/18
"use client";
import React, { useEffect } from "react";
import { useTaskTemplateStore } from "@/hooks/task-templates/useTaskTemplateStore";
import TaskTemplateDataTable from "@/components/task-templates/TaskTemplateDataTable";
import { useTaskTemplatePageParams } from "@/hooks/task-templates/useTaskTemplatePageParams";
import { useTaskTemplatesQuery } from "@/hooks/task-templates/useTaskTemplateQuery";
import {
  GetTaskTemplatesResponse,
  TaskTemplateModel,
} from "@/interfaces/TaskTemplateInterfaces";
import { VARIABLE_PLURAL_NAME } from "@/utils/constants/TagConstants";
import { useQueryClient, InfiniteData } from "@tanstack/react-query";
import _ from "lodash";

const TaskTemplateTable: React.FC = () => {
  const { params } = useTaskTemplatePageParams();
  const queryClient = useQueryClient();

  //Store Variables
  const page = useTaskTemplateStore((state) => state.page);
  const setRecordCount = useTaskTemplateStore((state) => state.setRecordCount);
  const fetchCount = useTaskTemplateStore((state) => state.fetchCount);
  const setFetchCount = useTaskTemplateStore((state) => state.setFetchCount);
  const previousData = useTaskTemplateStore((state) => state.currentData);
  const setCurrentData = useTaskTemplateStore((state) => state.setCurrentData);
  const setQueryResponse = useTaskTemplateStore(
    (state) => state.setQueryResponse
  );
  const setRefetchQuery = useTaskTemplateStore(
    (state) => state.setRefetchQuery
  );

  const queryParams = params;

  const taskTemplateQuery = () =>
    useTaskTemplatesQuery({
      ...queryParams,
      fetchCount: fetchCount.toString(),
    });

  const { data, refetch, isFetching, isLoading } = taskTemplateQuery();

  const currentPageData: GetTaskTemplatesResponse | null = data
    ? data.pages[page - (isFetching ? 2 : 1)]
    : null;
  const currentData: TaskTemplateModel[] =
    currentPageData === null ? previousData : currentPageData?.rows || [];

  //Client functions
  const refetchQuery = (idx: number) => {
    queryClient.setQueryData(
      [VARIABLE_PLURAL_NAME, { ...queryParams }],
      (data: InfiniteData<GetTaskTemplatesResponse> | undefined) => {
        return data
          ? {
              pages: data.pages.slice(0, idx + 1),
              pageParams: data.pageParams.slice(0, idx + 1),
            }
          : undefined;
      }
    );
    refetch({
      refetchPage(lastPage, index) {
        return index === idx;
      },
    });
  };

  useEffect(() => {
    setQueryResponse(taskTemplateQuery);
    if (currentPageData?.count !== undefined) {
      setRecordCount(currentPageData?.count || 0);
    }
    setFetchCount(!fetchCount);
    setCurrentData(currentData);
    setRefetchQuery(refetchQuery);
  }, [currentPageData?.count, data, page]);

  return <TaskTemplateDataTable taskTemplateQuery={taskTemplateQuery} />;
};

export default TaskTemplateTable;
