//Generated by WriteToModeltable_tsx - ModelTable.tsx for Table 9/18
"use client";
import React, { useEffect } from "react";
import { useTaskStore } from "@/hooks/tasks/useTaskStore";
import TaskDataTable from "@/components/tasks/TaskDataTable";
import { useTaskPageParams } from "@/hooks/tasks/useTaskPageParams";
import { TaskModel } from "@/interfaces/TaskInterfaces";
import { useQueryClient, InfiniteData } from "@tanstack/react-query";
import { useModelsQuery } from "@/hooks/useModelQuery";
import { TaskConfig } from "@/utils/config/TaskConfig";
import { GetModelsResponse } from "@/interfaces/GeneralInterfaces";

const TaskTable: React.FC = () => {
  const { params } = useTaskPageParams();
  const queryClient = useQueryClient();
  const config = TaskConfig;

  const [mounted, setMounted] = React.useState(false);

  //Store Variables
  const page = useTaskStore((state) => state.page);
  const setRecordCount = useTaskStore((state) => state.setRecordCount);
  const fetchCount = useTaskStore((state) => state.fetchCount);
  const setFetchCount = useTaskStore((state) => state.setFetchCount);
  const previousData = useTaskStore((state) => state.currentData);
  const setCurrentData = useTaskStore((state) => state.setCurrentData);
  const setQueryResponse = useTaskStore((state) => state.setQueryResponse);
  const setRefetchQuery = useTaskStore((state) => state.setRefetchQuery);

  const queryParams = params;

  const useTaskSearchQuery = () =>
    //@ts-ignore
    useModelsQuery<TaskModel>(config, {
      ...queryParams,
      fetchCount: fetchCount.toString(),
    });

  const { data, refetch, isFetching, isLoading } = useTaskSearchQuery();

  const currentPageData: GetModelsResponse<TaskModel> | null = data
    ? data.pages[page - (isFetching ? 2 : 1)]
    : null;
  const currentData: TaskModel[] =
    currentPageData === null ? previousData : currentPageData?.rows || [];

  //Client functions
  const refetchQuery = (idx: number) => {
    queryClient.setQueryData(
      [config.modelPath, { ...queryParams }],
      (data: InfiniteData<GetModelsResponse<TaskModel>> | undefined) => {
        return data
          ? {
              pages: data.pages.slice(0, idx + 1),
              pageParams: data.pageParams.slice(0, idx + 1),
            }
          : undefined;
      }
    );
    refetch({
      refetchPage(_, index) {
        return index === idx;
      },
    });
  };

  useEffect(() => {
    setMounted(true);
    return () => {
      setMounted(false);
    };
  }, []);

  useEffect(() => {
    setQueryResponse(useTaskSearchQuery);
    if (currentPageData?.count !== undefined) {
      setRecordCount(currentPageData?.count || 0);
    }
    setFetchCount(!fetchCount);
    setCurrentData(currentData);
    setRefetchQuery(refetchQuery);
  }, [currentPageData?.count, data, page]);

  return mounted && <TaskDataTable taskQuery={useTaskSearchQuery} />;
};

export default TaskTable;
