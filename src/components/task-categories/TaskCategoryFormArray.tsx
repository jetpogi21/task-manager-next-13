//Generated by WriteToModelformarray_tsx - ModelFormArray.tsx
import { TaskCategoryColumns } from "@/components/task-categories/TaskCategoryColumns";
import { TaskCategoryMultiCreateDeleteDialog } from "@/components/task-categories/TaskCategoryMultiCreateDeleteDialog";
import { Button } from "@/components/ui/Button";
import { DataTable } from "@/components/ui/DataTable";
import { useTaskCategoryDeleteDialog } from "@/hooks/task-categories/useTaskCategoryDeleteDialog";
import { useTaskCategoryPageParams } from "@/hooks/task-categories/useTaskCategoryPageParams";
import { useTaskCategoryStore } from "@/hooks/task-categories/useTaskCategoryStore";
import { TaskCategoryFormikShape } from "@/interfaces/TaskCategoryInterfaces";
import {
  DEFAULT_FORM_VALUE,
  FIRST_FIELD_IN_FORM,
  LAST_FIELD_IN_FORM,
  PLURALIZED_MODEL_NAME,
} from "@/utils/constants/TaskCategoryConstants";
import { getSorting } from "@/utils/utilities";
import { encodeParams, removeItemsByIndexes } from "@/utils/utils";
import {
  useReactTable,
  getCoreRowModel,
  SortingState,
} from "@tanstack/react-table";
import { Form, FormikProps } from "formik";
import { ChevronLast, Plus, Trash } from "lucide-react";
import React, { useEffect, useRef, useState } from "react";

interface TaskCategoryFormArrayProps {
  formik: FormikProps<{ TaskCategories: TaskCategoryFormikShape[] }>;
}

const TaskCategoryFormArray: React.FC<TaskCategoryFormArrayProps> = ({
  formik,
}) => {
  const { query, router, pathname, params } = useTaskCategoryPageParams();
  const { sort, limit } = params;

  //Local states
  const [willFocus, setWillFocus] = useState(false);
  const ref: React.RefObject<HTMLElement> = useRef(null); //to be attached to the last row in form, first control in that row

  const currentData = useTaskCategoryStore((state) => state.currentData);
  const queryResponse = useTaskCategoryStore((state) => state.queryResponse);
  const resetRowSelection = useTaskCategoryStore(
    (state) => state.resetRowSelection
  );
  const rowSelection = useTaskCategoryStore((state) => state.rowSelection);
  const setRowSelection = useTaskCategoryStore(
    (state) => state.setRowSelection
  );
  const setRowSelectionToAll = useTaskCategoryStore(
    (state) => state.setRowSelectionToAll
  );
  const page = useTaskCategoryStore((state) => state.page);
  const recordCount = useTaskCategoryStore((state) => state.recordCount);
  const isUpdating = useTaskCategoryStore((state) => state.isUpdating);
  const setPage = useTaskCategoryStore((state) => state.setPage);
  const lastFetchedPage = useTaskCategoryStore(
    (state) => state.lastFetchedPage
  );

  const setRecordsToDelete = useTaskCategoryDeleteDialog(
    (state) => state.setRecordsToDelete
  );

  //Page Constants
  const DEFAULT_TASKCATEGORY = DEFAULT_FORM_VALUE;

  //Tanstacks
  const {
    data: taskCategoryData,
    isLoading,
    isFetching,
    fetchNextPage,
  } = queryResponse!();

  //Transformations
  const sorting = getSorting(sort);
  const hasSelected = Object.values(rowSelection).some((val) => val);
  const dataRowCount = taskCategoryData
    ? currentData.length + (page - 1) * parseInt(limit)
    : 0;
  const pageStatus = `Showing ${dataRowCount} of ${recordCount} record(s)`;
  const hasPreviousPage = page > 1;
  const hasNextPage = dataRowCount < recordCount;

  //Client Actions
  const focusOnRef = () => {
    ref && ref.current?.focus();
  };

  const addRow = () => {
    formik.setFieldValue(`TaskCategories`, [
      ...formik.values.TaskCategories.map((item) => ({ ...item })),
      { ...DEFAULT_TASKCATEGORY },
    ]);
    setWillFocus(true);
  };

  const setTouchedRows = (idx: number) => {
    formik.setFieldValue(`TaskCategories[${idx}].touched`, true);
  };

  const deleteRow = (idx: number) => {
    const id = formik.values.TaskCategories[idx].id;

    if (id) {
      setRecordsToDelete([id.toString()]);
    } else {
      formik.setFieldValue(`TaskCategories`, [
        ...formik.values.TaskCategories.slice(0, idx),
        ...formik.values.TaskCategories.slice(idx + 1),
      ]);
      formik.setErrors({});
      resetRowSelection();
    }
  };

  const deleteSelectedRows = () => {
    const indexes = Object.keys(rowSelection).map((item) => parseInt(item));

    //Compute the Ids to be deleted. the index should be the selected indexes. then see if the rows has an actual id value
    const deletedIDs = formik.values.TaskCategories.filter((_, idx) =>
      indexes.includes(idx)
    )
      .filter((item) => !!item.id)
      .map((item) => item.id.toString());

    if (deletedIDs.length > 0) {
      setRecordsToDelete(deletedIDs);
    } else {
      formik.setFieldValue(
        `TaskCategories`,
        removeItemsByIndexes(formik.values.TaskCategories, indexes)
      );
      formik.setErrors({});
      resetRowSelection();
    }
  };

  const toggleRow = (idx: number) => setRowSelection(idx);
  const toggleSelectAllRow = () => {
    if (
      Object.keys(rowSelection).length === formik.values.TaskCategories.length
    ) {
      resetRowSelection();
    } else {
      setRowSelectionToAll(formik.values.TaskCategories.length);
    }
  };

  const goToPreviousPage = () => {
    if (taskCategoryData) {
      const newPage = page - 1;
      setPage(newPage);
      resetRowSelection();
    }
  };

  const goToNextPage = () => {
    if (taskCategoryData) {
      const newPage = page + 1;
      if (newPage <= lastFetchedPage) {
        setPage(newPage);
      } else {
        setPage(newPage);
        fetchNextPage();
      }
      resetRowSelection();
    }
  };

  const handleSortChange = (sortingState: SortingState) => {
    const sortParams = sortingState
      .map((item) => {
        if (item.desc) {
          return `-${item.id}`;
        } else {
          return `${item.id}`;
        }
      })
      .join(",");

    const params = { ...query, sort: sortParams };
    const newURL = `${pathname}?${encodeParams(params)}`;
    router.push(newURL);

    resetRowSelection();
  };

  const taskCategoryTable = useReactTable<TaskCategoryFormikShape>({
    data: formik.values.TaskCategories,
    columns: TaskCategoryColumns,
    state: {
      sorting: sorting,
      rowSelection,
    },
    //@ts-ignore
    onRowSelectionChange: (state) => setRowSelection(state()),
    //@ts-ignore
    onSortingChange: (state) => handleSortChange(state()), //since the sort state is getting tracked from the url do handle instead
    getCoreRowModel: getCoreRowModel(),
    manualFiltering: true,
    manualSorting: true,
    enableMultiRowSelection: true,
    meta: {
      name: PLURALIZED_MODEL_NAME,
      setTouchedRows,
      addRow,
      deleteRow,
      toggleRow,
      toggleSelectAllRow,
      firstFieldInForm: FIRST_FIELD_IN_FORM,
      lastFieldInForm: LAST_FIELD_IN_FORM,
      forwardedRef: ref,
      editable: true,
      options: {},
    },
  });

  //useEffects here
  useEffect(() => {
    if (willFocus) {
      focusOnRef();
    }
  }, [formik.values.TaskCategories]);

  return (
    <Form
      className="flex flex-col flex-1 gap-4"
      autoComplete="off"
      noValidate
    >
      <div className="flex items-center gap-4">
        <div className="text-sm">
          {taskCategoryTable.getFilteredSelectedRowModel().rows.length} of{" "}
          {taskCategoryTable.getFilteredRowModel().rows.length} row(s) selected.
        </div>
        {hasSelected && (
          <Button
            type="button"
            size={"sm"}
            variant={"destructive"}
            onClick={() => {
              deleteSelectedRows();
            }}
            className="flex items-center justify-center gap-2"
          >
            Delete Selected
            <Trash className="w-4 h-4 text-foreground" />
          </Button>
        )}
        <Button
          className="ml-auto"
          variant={"secondary"}
          type="button"
          size="sm"
          onClick={focusOnRef}
        >
          <ChevronLast className="w-4 h-4 text-foreground" /> Go to last row
        </Button>
      </div>

      <div className="border rounded-md">
        <DataTable
          isLoading={isLoading}
          table={taskCategoryTable}
        />
      </div>
      <div className="flex items-center justify-between mt-auto text-sm select-none text-muted-foreground">
        {!isLoading && (
          <div className="flex items-center justify-between w-full gap-4">
            <p className="hidden md:block">{pageStatus}</p>
            <div className="flex gap-2">
              <Button
                type="button"
                size="sm"
                variant={"secondary"}
                onClick={addRow}
                isLoading={isUpdating}
              >
                <Plus className="w-4 h-4 mr-1 text-foreground" />
                Add Row
              </Button>
              <Button
                type="submit"
                size={"sm"}
                isLoading={isUpdating}
                variant={"secondary"}
              >
                Save Changes
              </Button>
              <Button
                type="button"
                size="sm"
                disabled={!hasPreviousPage}
                onClick={() => goToPreviousPage()}
                variant={"secondary"}
              >
                Previous
              </Button>
              <Button
                type="button"
                size="sm"
                disabled={!hasNextPage}
                onClick={() => goToNextPage()}
                isLoading={isFetching}
                variant={"secondary"}
              >
                Next
              </Button>
            </div>
          </div>
        )}
      </div>
      <TaskCategoryMultiCreateDeleteDialog />
    </Form>
  );
};

export default TaskCategoryFormArray;
