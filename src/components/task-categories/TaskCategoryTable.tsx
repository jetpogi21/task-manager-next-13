//Generated by WriteToModeltable_tsx - ModelTable.tsx
"use client";
import React, { useEffect } from "react";
import { useTaskCategoryStore } from "@/hooks/task-categories/useTaskCategoryStore";
import {
  TaskCategoryModel,
  TaskCategorySearchParams,
} from "@/interfaces/TaskCategoryInterfaces";
import { useQueryClient } from "@tanstack/react-query";
import { Formik } from "formik";
import { TaskCategoryConfig } from "@/utils/config/TaskCategoryConfig";
import { useModelPageParams } from "@/hooks/useModelPageParams";
import { getInitialValues } from "@/lib/getInitialValues";
import { BasicModel, GetModelsResponse } from "@/interfaces/GeneralInterfaces";
import { createRequiredModelLists } from "@/lib/createRequiredModelLists";
import { useModelsQuery, useUpdateModelsMutation } from "@/hooks/useModelQuery";
import { ModelSchema } from "@/schema/ModelSchema";
import ModelFormArray from "@/components/ModelFormArray";
import { getCurrentData } from "@/lib/getCurrentData";
import { getRefetchQueryFunction } from "@/lib/refetchQuery";
import { toast } from "@/hooks/use-toast";

const TaskCategoryTable: React.FC = () => {
  const modelConfig = TaskCategoryConfig;
  const { pluralizedModelName } = modelConfig;
  const { params } = useModelPageParams<TaskCategorySearchParams>(modelConfig);
  const queryClient = useQueryClient();

  const [mounted, setMounted] = React.useState(false);

  const requiredList: Record<string, BasicModel[]> =
    createRequiredModelLists(modelConfig);

  //Page constants
  const defaultFormValue = getInitialValues(modelConfig, undefined, {
    childMode: true,
    requiredList,
  });

  //Store Variables
  const page = useTaskCategoryStore((state) => state.page);
  const setRecordCount = useTaskCategoryStore((state) => state.setRecordCount);
  const fetchCount = useTaskCategoryStore((state) => state.fetchCount);
  const setFetchCount = useTaskCategoryStore((state) => state.setFetchCount);
  const previousData = useTaskCategoryStore((state) => state.currentData);
  const setCurrentData = useTaskCategoryStore((state) => state.setCurrentData);
  const setQueryResponse = useTaskCategoryStore(
    (state) => state.setQueryResponse
  );
  const setRefetchQuery = useTaskCategoryStore(
    (state) => state.setRefetchQuery
  );

  const recordCount = useTaskCategoryStore((state) => state.recordCount);
  const setIsUpdating = useTaskCategoryStore((state) => state.setIsUpdating);
  const isUpdating = useTaskCategoryStore((state) => state.isUpdating);
  const setPage = useTaskCategoryStore((state) => state.setPage);
  const lastFetchedPage = useTaskCategoryStore(
    (state) => state.lastFetchedPage
  );

  const queryParams = params;
  const useTaskCategorySearchQuery = () =>
    useModelsQuery<TaskCategoryModel>(modelConfig, {
      ...params,
      fetchCount: fetchCount.toString(),
    });

  const queryResponse = useTaskCategorySearchQuery();
  const { data, refetch, isFetching } = queryResponse;

  const currentPageData: GetModelsResponse<TaskCategoryModel> | null = data
    ? data.pages[page - (isFetching ? 2 : 1)]
    : null;
  const currentData: any[] = getCurrentData(
    currentPageData,
    previousData as any,
    defaultFormValue
  );

  //Client functions
  const refetchQuery = getRefetchQueryFunction(
    modelConfig,
    params,
    refetch,
    queryClient
  );

  const updateModelsMutation = useUpdateModelsMutation(modelConfig);

  //Client Actions
  const handleSubmit = async (values: any) => {
    //The reference is the index of the row
    //@ts-ignore
    const rowsToBeSubmitted = values[pluralizedModelName].filter(
      //@ts-ignore
      (item) => item.touched
    );

    if (rowsToBeSubmitted.length > 0) {
      setIsUpdating(true);
      const payload = {
        [pluralizedModelName]: rowsToBeSubmitted,
      };

      //@ts-ignore
      updateModelsMutation.mutateAsync(payload).then((data) => {
        console.log(data);
        setIsUpdating(false);
        toast({
          variant: "success",
          description: `${modelConfig.pluralizedVerboseModelName} successfully updated`,
        });
      });
    }
  };

  useEffect(() => {
    if (currentPageData?.count !== undefined) {
      setRecordCount(currentPageData?.count || 0);
    }
    setFetchCount(!fetchCount);
    setCurrentData(currentData);
    setRefetchQuery(refetchQuery);
  }, [currentPageData?.count, data, page]);

  useEffect(() => {
    setMounted(true);
  }, []);

  return (
    mounted && (
      <Formik
        initialValues={{
          [pluralizedModelName]: currentData,
        }}
        enableReinitialize={true}
        onSubmit={handleSubmit}
        validationSchema={ModelSchema(modelConfig, true)}
        validateOnChange={false}
      >
        {(formik) => (
          <ModelFormArray
            formik={formik as any}
            modelConfig={modelConfig}
            storeStates={{
              currentData,
              page,
              recordCount,
              isUpdating,
              setPage,
              lastFetchedPage,
              setRecordCount,
            }}
            queryResponse={queryResponse as any}
            refetchQuery={refetchQuery}
          />
        )}
      </Formik>
    )
  );
};

export default TaskCategoryTable;
