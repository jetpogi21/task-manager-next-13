//Generated by WriteToUsemodelnametable_tsx - useModelNameTable.tsx
import { useTaskIntervalPageParams } from "@/hooks/taskIntervals/useTaskIntervalPageParams";
import { useTaskIntervalsQuery } from "@/hooks/task-intervals/useTaskIntervalQuery";
import { useTaskIntervalStore } from "@/hooks/task-intervals/useTaskIntervalStore";
import {
  GetTaskIntervalsResponse,
  TaskIntervalModel,
} from "@/interfaces/TaskIntervalInterfaces";
import { VARIABLE_PLURAL_NAME } from "@/utils/constants/TaskIntervalConstants";
import { InfiniteData, useQueryClient } from "@tanstack/react-query";
import { useEffect } from "react";

export const useTaskIntervalTable = () => {
  const { params } = useTaskIntervalPageParams();
  const queryClient = useQueryClient();

  //Store Variables
  const page = useTaskIntervalStore((state) => state.page);
  const setRecordCount = useTaskIntervalStore((state) => state.setRecordCount);
  const fetchCount = useTaskIntervalStore((state) => state.fetchCount);
  const setFetchCount = useTaskIntervalStore((state) => state.setFetchCount);
  const setCurrentData = useTaskIntervalStore((state) => state.setCurrentData);
  const setQueryResponse = useTaskIntervalStore(
    (state) => state.setQueryResponse
  );
  const setRefetchQuery = useTaskIntervalStore(
    (state) => state.setRefetchQuery
  );

  const queryParams = params;

  const taskIntervalQuery = () =>
    useTaskIntervalsQuery({
      ...queryParams,
      fetchCount: fetchCount.toString(),
    });

  const { data, refetch, isFetching } = taskIntervalQuery();

  const currentPageData: GetTaskIntervalsResponse | null = data
    ? data.pages[page - (isFetching ? 2 : 1)]
    : null;
  const currentData: TaskIntervalModel[] = currentPageData?.rows || [];

  //Client functions
  const refetchQuery = (idx: number) => {
    queryClient.setQueryData(
      [VARIABLE_PLURAL_NAME, queryParams],
      (data: InfiniteData<GetTaskIntervalsResponse> | undefined) => {
        return data
          ? {
              pages: data.pages.slice(0, idx + 1),
              pageParams: data.pageParams.slice(0, idx + 1),
            }
          : undefined;
      }
    );
    refetch();
  };

  useEffect(() => {
    setQueryResponse(taskIntervalQuery);
    if (currentPageData?.count !== undefined) {
      setRecordCount(currentPageData?.count || 0);
    }
    setFetchCount(!fetchCount);
    setCurrentData(currentData);
    setRefetchQuery(refetchQuery);
  }, [currentPageData?.count, data, page]);

  return null;
};
