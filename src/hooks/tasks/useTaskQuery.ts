//Generated by WriteToUsemodelquery_ts - useModelQuery.ts
import { TaskFormUpdatePayload, TaskModel } from "@/interfaces/TaskInterfaces";
import axiosClient from "@/utils/api";
import { PRIMARY_KEY } from "@/utils/constants/TaskConstants";
import { UseQueryResult, useMutation, useQuery } from "@tanstack/react-query";

const BASE_URL = "tasks";

type IndexAndID = {
  index: number;
  id: number | string;
};

type Response = {
  id: number | string;
  slug?: string;
  //Generated by GetAllRelatedIndexAndID
  SubTasks: IndexAndID[];
  TaskNotes: IndexAndID[];
  //Generated by GetAllRelatedIDSimple
  //Generated by GetRelatedIDSimple - GetRelatedIDSimple
  TaskTags: {
    tagID: number;
    id: number | string;
  }[];
};

const updateTask = async (
  payload: TaskFormUpdatePayload,
  id: string | number
) => {
  const { data } = await axiosClient({
    url: BASE_URL + "/" + id,
    method: "put",
    data: payload,
  });

  return data as Response;
};

const addTask = async (payload: TaskFormUpdatePayload) => {
  const { data } = await axiosClient({
    url: BASE_URL,
    method: "post",
    data: payload,
  });

  return data as Response;
};

export const getTask = async ({ queryKey }: { queryKey: [string, string] }) => {
  const { data } = await axiosClient.get<TaskModel>(
    `${BASE_URL}/${queryKey[1]}`
  );
  return data;
};

const addOrUpdateTask = (payload: TaskFormUpdatePayload) => {
  if (payload[PRIMARY_KEY]) {
    return updateTask(payload, payload[PRIMARY_KEY]);
  } else {
    return addTask(payload);
  }
};

export const useTaskQuery = (
  slug: string,
  options?: Parameters<typeof useQuery>[2]
) => {
  const taskMutation = useMutation(addOrUpdateTask);

  const taskQuery = useQuery(
    ["task", slug],
    getTask,
    //@ts-ignore
    options
  ) as UseQueryResult<TaskModel, any>;

  return { taskMutation, taskQuery };
};
