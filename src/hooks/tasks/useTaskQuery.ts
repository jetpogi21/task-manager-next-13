//Generated by WriteToUsemodelquery_ts - useModelQuery.ts
import {
  GetTasksResponse,
  TaskFormUpdatePayload,
  TaskModel,
  TaskSearchParams,
} from "@/interfaces/TaskInterfaces";
import axiosClient from "@/utils/api";
import { DEFAULT_FILTERS, PRIMARY_KEY } from "@/utils/constants/TaskConstants";
import { getAxiosParams } from "@/utils/utilities";
import {
  QueryMeta,
  UseQueryResult,
  useInfiniteQuery,
  useMutation,
  useQuery,
} from "@tanstack/react-query";

const BASE_URL = "tasks";

type IndexAndID = {
  index: number;
  id: number | string;
};

type Response = {
  id?: number | string;
  slug?: string;
  //Generated by GetAllRelatedIndexAndID
  SubTasks: IndexAndID[];
  TaskNotes: IndexAndID[];
  //Generated by GetAllRelatedIDSimple
  //Generated by GetRelatedIDSimple - GetRelatedIDSimple
  TaskTags: {
    tagID: number;
    id: number | string;
  }[];
};

const updateTask = async (
  payload: TaskFormUpdatePayload,
  id: string | number
) => {
  const { data } = await axiosClient({
    url: BASE_URL + "/" + id,
    method: "put",
    data: payload,
  });

  return data as Response;
};

const addTask = async (payload: TaskFormUpdatePayload) => {
  const { data } = await axiosClient({
    url: BASE_URL,
    method: "post",
    data: payload,
  });

  return data as Response;
};

export const getTask = async ({ queryKey }: { queryKey: [string, string] }) => {
  const { data } = await axiosClient.get<TaskModel>(
    `${BASE_URL}/${queryKey[1]}`
  );
  return data;
};

const addOrUpdateTask = (payload: TaskFormUpdatePayload) => {
  if (payload[PRIMARY_KEY]) {
    return updateTask(payload, payload[PRIMARY_KEY]);
  } else {
    return addTask(payload);
  }
};

export const useTaskQuery = (
  slug: string,
  options?: Parameters<typeof useQuery>[2]
) => {
  const taskMutation = useMutation(addOrUpdateTask);

  const taskQuery = useQuery(
    ["task", slug],
    getTask,
    //@ts-ignore
    options
  ) as UseQueryResult<TaskModel, any>;

  return { taskMutation, taskQuery };
};

//Generated by GetCodeOriginallyFromModelTable - GetCodeOriginallyFromModelTable
interface GetTasksProps {
  pageParam?: string;
  queryKey: [string, Partial<TaskSearchParams>];
  meta: QueryMeta | undefined;
}
const getTasks = async ({ pageParam = "", queryKey, meta }: GetTasksProps) => {
  const [
    _,
    {
      //Generated by GetAllQueryKeyValueOfGetPluralizedModelName
      q = "", //Generated by GetQueryKeyValueOfGetPluralizedModelName - GetQueryKeyValueOfGetPluralizedModelName
      taskCategory = "", //Generated by GetQueryKeyValueOfGetPluralizedModelName - GetQueryKeyValueOfGetPluralizedModelName
      taskInterval = "", //Generated by GetQueryKeyValueOfGetPluralizedModelName - GetQueryKeyValueOfGetPluralizedModelName
      isFinished = "", //Generated by GetQueryKeyValueOfGetPluralizedModelName - GetQueryKeyValueOfGetPluralizedModelName
      limit = "",
      sort = "",
    },
  ] = queryKey;

  const { fetchCount } = meta!;

  const axiosParams = getAxiosParams(
    {
      //Generated by GetAllFilterQueryNameBySeqModel
      q,
      taskCategory,
      taskInterval,
      isFinished,
    },
    DEFAULT_FILTERS,
    {
      cursor: pageParam,
      limit,
      sort,
      //@ts-ignore
      fetchCount: fetchCount.toString(),
    }
  ) as Partial<TaskSearchParams>;

  const { data } = await axiosClient.get<GetTasksResponse>(`tasks`, {
    params: axiosParams,
  });

  return data;
};

interface UseTasksQueryProps extends Partial<TaskSearchParams> {}

export const useTasksQuery = ({
  //Generated by GetAllFilterQueryNameBySeqModel
  q,
  taskCategory,
  taskInterval,
  isFinished,
  limit,
  sort,
  fetchCount,
}: UseTasksQueryProps) => {
  const _ = useInfiniteQuery(
    [
      "tasks",
      {
        //Generated by GetAllFilterQueryNameBySeqModel
        q,
        taskCategory,
        taskInterval,
        isFinished,
        limit,
        sort,
      },
    ],
    getTasks,
    {
      keepPreviousData: true,
      getNextPageParam: (lastPage) => lastPage.cursor ?? undefined,
      meta: {
        fetchCount,
      },
    }
  );
  return _;
};
