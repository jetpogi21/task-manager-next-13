//Generated by WriteToUsemodelnametable_tsx - useModelNameTable.tsx
import { useTasksQuery } from "@/hooks/tasks/useTaskQuery";
import { useTaskStore } from "@/hooks/tasks/useTaskStore";
import { useURL } from "@/hooks/useURL";
import { TaskSearchParams } from "@/interfaces/TaskInterfaces";
import { DEFAULT_LIMIT } from "@/utils/constants";
import { DEFAULT_SORT_BY } from "@/utils/constants/TagConstants";
import { useEffect } from "react";

export const useTaskTable = () => {
  const { query } = useURL<TaskSearchParams>();

  ///Local States

  //SearchParams Variables
  //Generated by GetAllSearchParamsBySeqModel
  const q = query["q"] || "";
  const taskCategory = query["taskCategory"] || "";
  const taskInterval = query["taskInterval"] || "";
  const isFinished = query["isFinished"] || "";
  const sort = query["sort"] || DEFAULT_SORT_BY;
  const limit = query["limit"] || DEFAULT_LIMIT;

  //Page constants

  //Store Variables
  const page = useTaskStore((state) => state.page);
  const setRecordCount = useTaskStore((state) => state.setRecordCount);
  const lastPage = useTaskStore((state) => state.lastPage);
  const setLastPage = useTaskStore((state) => state.setLastPage);
  const setPage = useTaskStore((state) => state.setPage);
  const fetchCount = useTaskStore((state) => state.fetchCount);
  const setFetchCount = useTaskStore((state) => state.setFetchCount);
  const setCurrentData = useTaskStore((state) => state.setCurrentData);
  const setQueryResponse = useTaskStore((state) => state.setQueryResponse);

  const taskQueryResponse = useTasksQuery({
    //Generated by GetAllFilterQueryNameBySeqModel
    q,
    taskCategory,
    taskInterval,
    isFinished,
    sort,
    limit,
    fetchCount: fetchCount.toString(),
  });

  const { data } = taskQueryResponse;

  useEffect(() => {
    if (data) {
      setQueryResponse(taskQueryResponse);
      const newPage = page === 0 ? 1 : page;
      const newLastPage = lastPage === 0 ? 1 : lastPage;
      setPage(newPage);
      setLastPage(newLastPage);

      if (fetchCount) {
        setFetchCount(false);
        setRecordCount(data.pages[0].count);
      }

      if (data.pages.length >= newPage) {
        setCurrentData(data.pages[newPage - 1].rows);
      }
    }
  }, [data]);

  return null;
};
