//Generated by Generate_getModelAPIRouteNext13 - getModel API Route Next 13
import { Task } from "@/models/TaskModel";
import { FindOptions, Sequelize } from "sequelize";
import { cloneDeep } from "lodash";
import { genericDelete, genericGetOne } from "@/utils/generic";
import { TaskFormUpdatePayload } from "@/interfaces/TaskInterfaces";
import { TaskSchema } from "@/schema/TaskSchema";
import sequelize from "@/config/db";
import handleSequelizeError from "@/utils/errorHandling";
import { returnJSONResponse, validateRequiredFields } from "@/utils/utils";
import { Op } from "sequelize";
import { updateTask } from "@/utils/api/TaskLibs";
import { NextResponse } from "next/server";
import { PRIMARY_KEY } from "@/utils/constants/TaskConstants";
//Generated by GetAllAPIRelatedLeftModelImportBySeqModel
//Generated by GetAPIRelatedLeftModelImport - GetAPIRelatedLeftModelImport
import { SubTask } from "@/models/SubTaskModel";
import { SubTaskModel } from "@/interfaces/SubTaskInterfaces";
import { SubTaskSchema } from "@/schema/SubTaskSchema";
import { PRIMARY_KEY as SUBTASK_PRIMARY_KEY } from "@/utils/constants/SubTaskConstants";
import {
  createSubTask,
  deleteSubTasks,
  updateSubTask,
} from "@/utils/api/SubTaskLibs";
//Generated by GetAPIRelatedLeftModelImport - GetAPIRelatedLeftModelImport
import { TaskTag } from "@/models/TaskTagModel";
import { TaskTagModel } from "@/interfaces/TaskTagInterfaces";
import { TaskTagSchema } from "@/schema/TaskTagSchema";
import { PRIMARY_KEY as TASKTAG_PRIMARY_KEY } from "@/utils/constants/TaskTagConstants";
import {
  createTaskTag,
  deleteTaskTags,
  updateTaskTag,
} from "@/utils/api/TaskTagLibs";
//Generated by GetAPIRelatedLeftModelImport - GetAPIRelatedLeftModelImport
import { TaskNote } from "@/models/TaskNoteModel";
import { TaskNoteModel } from "@/interfaces/TaskNoteInterfaces";
import { TaskNoteSchema } from "@/schema/TaskNoteSchema";
import { PRIMARY_KEY as TASKNOTE_PRIMARY_KEY } from "@/utils/constants/TaskNoteConstants";
import {
  createTaskNote,
  deleteTaskNotes,
  updateTaskNote,
} from "@/utils/api/TaskNoteLibs";
//Generated by GetAllAPIRelatedRightModelImportBySeqModel
//Generated by GetAPIRelatedRightModelImport - GetAPIRelatedRightModelImport
import { TaskTemplate } from "@/models/TaskTemplateModel";
//Generated by GetAPIRelatedRightModelImport - GetAPIRelatedRightModelImport
import { TaskCategory } from "@/models/TaskCategoryModel";
//Generated by GetAPIRelatedRightModelImport - GetAPIRelatedRightModelImport
import { TaskInterval } from "@/models/TaskIntervalModel";

const ModelObject = Task;

//Generated by GeneratefindOptions
const findOptions: FindOptions<typeof Task> = {
  //Generated by GenerateIncludeOption

  include: [
    {
      model: SubTask,
      //Generated by GenerateAttributesOption

      attributes: ["id", "description", "priority", "finishDateTime", "taskID"],
    },
    {
      model: TaskTag,
      //Generated by GenerateAttributesOption

      attributes: ["id", "taskID", "tagID"],
    },
    {
      model: TaskNote,
      //Generated by GenerateAttributesOption

      attributes: ["id", "note", "taskID", "file"],
    },
    {
      model: TaskCategory,
      //Generated by GenerateAttributesOption

      attributes: ["id", "name"],
    },
    {
      model: TaskInterval,
      //Generated by GenerateAttributesOption

      attributes: ["id", "name"],
    },
  ],
  //Generated by GenerateAttributesOption

  attributes: [
    "taskCategoryID",
    "taskIntervalID",
    "id",
    "description",
    "taskTemplateID",
    "date",
    "targetDate",
    "finishDateTime",
    "isFinished",
  ],
};

export const GET = async (
  req: Request,
  { params }: { params: { id: string } }
) => {
  //Generated by Generate_findOptionsCopy
  const findOptionsCopy: FindOptions<typeof Task> = cloneDeep(findOptions);

  const id = params.id;
  return genericGetOne(ModelObject, findOptionsCopy, id);
};

//Generated by GetUpdateFunctionWithRelationshipNext13 - Update With Relationship Next 13
export const PUT = async (
  req: Request,
  { params }: { params: { id: string } }
) => {
  const res = (await req.json()) as TaskFormUpdatePayload;
  const id = params.id;

  try {
    await TaskSchema.validate(res);
  } catch (error: any) {
    return returnJSONResponse({
      status: "error",
      errorCode: 401,
      error: error.message,
    });
  }

  //Generated by GetAllRelatedPluralizedModelName
  const { SubTasks, TaskNotes } = res;
  //Generated by GetAllRelatedSimpleModelFromRes
  //Generated by GetRelatedSimpleModelFromRes - GetRelatedSimpleModelFromRes
  const { deletedTaskTags, newTags } = res;

  const t = await sequelize.transaction();

  try {
    await updateTask(res, PRIMARY_KEY, t, id);

    //Generated by GetAllRelatedModelUpdateOrInsert
    //Generated by GetRelatedModelUpdateOrInsert - GetRelatedModelUpdateOrInsert
    const createdSubTasks: { index: number; id: number }[] = [];
    if (SubTasks) {
      for (const item of SubTasks) {
        item.taskID = id;
        await SubTaskSchema.validate(item);

        if (item.id === "") {
          const subTask = await createSubTask(item, t);

          createdSubTasks.push({
            index: item.index,
            id: subTask[SUBTASK_PRIMARY_KEY],
          });
        } else {
          await updateSubTask(item, SUBTASK_PRIMARY_KEY, t);
        }
      }
    }
    //Generated by GetRelatedModelUpdateOrInsert - GetRelatedModelUpdateOrInsert
    const createdTaskNotes: { index: number; id: number }[] = [];
    if (TaskNotes) {
      for (const item of TaskNotes) {
        item.taskID = id;
        await TaskNoteSchema.validate(item);

        if (item.id === "") {
          const taskNote = await createTaskNote(item, t);

          createdTaskNotes.push({
            index: item.index,
            id: taskNote[TASKNOTE_PRIMARY_KEY],
          });
        } else {
          await updateTaskNote(item, TASKNOTE_PRIMARY_KEY, t);
        }
      }
    }
    //Generated by GetAllThroughModelUpdateOrInsert
    //Generated by GetThroughModelUpdateOrInsert - GetThroughModelUpdateOrInsert
    const createdTaskTags: { tagID: number; id: number }[] = [];
    if (newTags.length > 0) {
      for (const item of newTaskKeywords) {
        const taskTag = await createTaskTag(
          {
            taskID: id,
            tagID: item,
          },
          t
        );

        createdTaskTags.push({
          tagID: parseInt(item),
          id: taskTag[TASKTAG_PRIMARY_KEY],
        });
      }
    }

    if (deletedTaskTags.length > 0) {
      await deleteTaskTags(
        TASKTAG_PRIMARY_KEY,
        deletedTaskTags.map((item) => parseInt(item)),
        t
      );
    }

    t.commit();
    return NextResponse.json({
      status: "success",
      //Generated by GetAllRelatedModelKeyValue
      SubTasks: createdSubTasks, //Generated by GetRelatedModelKeyValue - GetRelatedModelKeyValue
      TaskTags: createdTaskTags, //Generated by GetRelatedModelKeyValue - GetRelatedModelKeyValue
      TaskNotes: createdTaskNotes, //Generated by GetRelatedModelKeyValue - GetRelatedModelKeyValue
    });
  } catch (err) {
    t.rollback();
    return handleSequelizeError(err);
  }
};

export const DELETE = async (
  req: Request,
  { params }: { params: { id: string } }
) => {
  const id = params.id;
  return genericDelete(ModelObject, id);
};
