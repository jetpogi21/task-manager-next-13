//Generated by WriteToModelsRouteApi
import { CardKeyword } from "@/models/CardKeywordModel";
import { FindOptions } from "sequelize";
import { cloneDeep } from "lodash";
import {
  checkDuplicateCombinations,
  formatSortAsSequelize,
  getSort,
  parseParams,
  returnJSONResponse,
  splitWordByLastHyphen,
  validateFieldIfBlank,
} from "@/utils/utils";
import { genericGetAll } from "@/utils/generic";
import sequelize from "@/config/db";
import handleSequelizeError from "@/utils/errorHandling";
import { Op } from "sequelize";
import {
  CardKeywordSearchParams,
  CardKeywordUpdatePayload,
} from "@/interfaces/CardKeywordInterfaces";
import { NextResponse } from "next/server";
import { DEFAULT_LIMIT } from "@/utils/constants";
import {
  DEFAULT_SORT_BY,
  PRIMARY_KEY,
  REQUIRED_FIELDS,
  UNIQUE_FIELDS
} from "@/utils/constants/CardKeywordConstants";

//Generated by GenerateImportRelatedModels

const ModelObject = CardKeyword;

//Generated by GeneratefindOptions
const findOptions: FindOptions<typeof CardKeyword> = {
  //Generated by GenerateIncludeOption
  include: [],
  //Generated by GenerateAttributesOption
  attributes: [//Generated by GetAllModelAttributesBySeqModel
"id","name","slug"],
};

//Generated by Generate_getModelsSimpleFilterNext13
export const GET = async (req: Request) => {
  //Generated by Generate_findOptionsCopy
  const findOptionsCopy: FindOptions<typeof CardKeyword> = cloneDeep(findOptions);
  const cardKeywordAttributes = Object.keys(CardKeyword.getAttributes()).map(
    (attribute) => attribute
  );

  const searchParams = new URL(req.url).searchParams;

  const query = parseParams(searchParams) as Partial<CardKeywordSearchParams>;
  const primaryKey = PRIMARY_KEY;

  const simpleOnly = query["simpleOnly"];
  const cursor = query["cursor"];
  const fetchCount = query["fetchCount"] === "true";

  let limit = query["limit"];
  const sort = query["sort"]
    ? cardKeywordAttributes.includes(query["sort"]) ||
      cardKeywordAttributes.includes(query["sort"].substring(1))
      ? query["sort"]
      : DEFAULT_SORT_BY
    : DEFAULT_SORT_BY;

  //Remove the - from the sort parameter
  const sortField = sort.includes("-") ? sort.substring(1) : sort;


  if (!simpleOnly) {
    const where: Record<string | symbol, unknown> = {};

    const q = query["q"];

    if (q) {
      where[Op.or] = [//Generated by GetAllQFilterFieldBySeqModel
{ name: { [Op.like]: `%${q}%` } }];
    }

    //get all the count here first
    let recordCount = 0;
    if (fetchCount) {
      recordCount = await CardKeyword.count({
        where,
      });
    }

    if (cursor) {
      //Use less than if the sort is descending
      const cursorCondition = sort.includes("-") ? Op.lt : Op.gt;
      //If sortField is not primary key then do dual cursor
      if (sortField !== primaryKey) {
        const cursorArray = splitWordByLastHyphen(cursor);
        where[Op.or] = {
          [sortField]: {
            [cursorCondition]: cursorArray[0],
          },
          [Op.and]: {
            [sortField]: cursorArray[0],
            [primaryKey]: {
              [Op.gt]: cursorArray[1],
            },
          },
        };
      } else {
        where[Op.and] = {
          [sortField]: {
            [cursorCondition]: cursor,
          },
        };
      }
    }

    findOptionsCopy.where = where;
    limit = limit || DEFAULT_LIMIT;
    findOptionsCopy.limit = parseInt(limit);

    //@ts-ignore
    findOptionsCopy.order = formatSortAsSequelize(
      getSort(sort, DEFAULT_SORT_BY, primaryKey)
    );

    try {
      const data = await CardKeyword.findAll(findOptionsCopy);

      let cursor = "";

      if (data && data.length > 0) {
        //The cursor will have 2 items since there will be 2 cursors to be made
        if (sortField !== primaryKey) {
          //@ts-ignore
          cursor = `${data[data.length - 1][sortField].toString()}-${data[
            data.length - 1
          ][primaryKey].toString()}`;
        } else {
          cursor = `${data[data.length - 1][sortField].toString()}`;
        }
      }

      return NextResponse.json({
        rows: data,
        cursor,
        ...(fetchCount && { count: recordCount }),
      });
    } catch (err) {
      return handleSequelizeError(err);
    }
  } else {
    return genericGetAll(ModelObject, findOptionsCopy);
  }
};

export const POST = async (req: Request) => {
  const body = (await req.json()) as CardKeywordUpdatePayload;
  const { CardKeywords, deletedCardKeywords } = body;

  //Generated by GenerateUniquenessValidation
  //Validate record uniqueness

  UNIQUE_FIELDS.forEach((item) => {
    const uniquenessError = checkDuplicateCombinations(item, CardKeywords);

    if (uniquenessError) {
      return returnJSONResponse({
        status: "error",
        error: uniquenessError,
        errorCode: 422,
      });
    }
  });

  const t = await sequelize.transaction();
  let recordsCreated = 0;
  let recordsDeleted = 0;

  for (const item of CardKeywords) {
    const validationMessage = validateFieldIfBlank(item, REQUIRED_FIELDS);
    if (validationMessage) {
      throw new Error(validationMessage);
    }
  }

  try {
    for (const item of CardKeywords) {
      if (item[PRIMARY_KEY] === "") {
        await CardKeyword.create(
          {
            //Generated by GetAllFieldsToUpdateBySeqModel
name: item.name!
          },
          { transaction: t }
        );

        recordsCreated++;
      } else {
        await CardKeyword.update(
          {
            //Generated by GetAllFieldsToUpdateBySeqModel
name: item.name!
          },
          { where: { [PRIMARY_KEY]: item[PRIMARY_KEY] }, transaction: t }
        );
      }
    }

    if (deletedCardKeywords.length > 0) {
      // Get the count of records to be deleted
      const recordsToDeleteCount = await CardKeyword.count({
        where: { [PRIMARY_KEY]: { [Op.in]: deletedCardKeywords } },
      });

      await CardKeyword.destroy({
        where: { [PRIMARY_KEY]: { [Op.in]: deletedCardKeywords } },
        transaction: t,
      });

      // Set the recordsDeleted count to the actual number of records deleted
      recordsDeleted = recordsToDeleteCount;
    }

    await t.commit();

    return NextResponse.json({
      recordsCreated,
      recordsDeleted,
    });
  } catch (err) {
    await t.rollback();
    return handleSequelizeError(err);
  }
};
