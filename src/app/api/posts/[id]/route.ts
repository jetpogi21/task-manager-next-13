//Generated by Generate_getModelAPIRouteNext13
import { NextRequest, NextResponse } from "next/server";
import { Post } from "@/models/PostModel";
import { FindOptions } from "sequelize";
import { cloneDeep } from "lodash";
import { genericDelete, genericGetOne } from "@/utils/generic";
import { PostBodyForUpdate } from "@/interfaces/PostInterfaces";
import sequelize from "@/config/db";
import handleSequelizeError from "@/utils/errorHandling";
import { returnJSONResponse, validateRequiredFields } from "@/utils/utils";

//Generated by GenerateImportRelatedModels
import TUser, { User } from "@/models/UserModel"; //Generated by ImportAsRelatedModelBackend

const ModelObject = Post;

//Generated by GeneratefindOptions
const findOptions: FindOptions<typeof Post> = {
  //Generated by GenerateIncludeOption

  include: [
    {
      model: User,
      //Generated by GenerateAttributesOption

      attributes: ["password"],
    },
  ],
  //Generated by GenerateAttributesOption

  attributes: ["postId", "userId", "title", "body"],
};

export const GET = async (
  req: Request,
  { params }: { params: { id: string } }
) => {
  //Generated by Generate_findOptionsCopy
  const findOptionsCopy: FindOptions<typeof Post> = cloneDeep(findOptions);

  const id = params.id;
  genericGetOne(ModelObject, id, findOptionsCopy);
};

//Generated by GetUpdateFunctionWithRelationshipNext13
export const PUT = async (
  req: Request,
  { params }: { params: { id: string } }
) => {
  const res = (await req.json()) as Partial<PostBodyForUpdate>;
  const { userId, title, body } = res;
  const id = params.id;

  //Generated by GetBackendModelRequiredSnippets
  validateRequiredFields(
    { userId: "User ID", title: "Title", body: "Body" },
    res
  );

  //Generated by GenerateEnumValidation

  try {
    const result = await sequelize.transaction(async (t) => {
      const promises = [];
      promises.push(
        Post.update(
          {
            userId: userId!, //Generated by GenerateCreateUpdateField
            title: title!, //Generated by GenerateCreateUpdateField
            body: body!,
          },
          { where: { postId: id }, transaction: t }
        )
      );

      await Promise.all(promises);
      returnJSONResponse({ status: "success" });
    });
  } catch (err) {
    handleSequelizeError(err);
  }
};

export const DELETE = async (
  req: Request,
  { params }: { params: { id: string } }
) => {
  const id = params.id;
  return genericDelete(ModelObject, id);
};
