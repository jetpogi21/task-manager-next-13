//Generated by WriteToMultiRoute_ts - multi route.ts
import sequelize from "@/config/db";
import { ModelSchema } from "@/schema/ModelSchema";
import { createModel, updateModel } from "@/utils/api/ModelLibs";
import { TagConfig } from "@/utils/config/TagConfig";
import handleSequelizeError from "@/utils/errorHandling";
import { findModelPrimaryKeyField } from "@/utils/utilities";
import { NextResponse } from "next/server";

const modelConfig = TagConfig;
const primaryKeyField = findModelPrimaryKeyField(modelConfig).fieldName;
//Generated by GetMultiCreateModelPOSTRoute - GetMultiCreateModelPOSTRoute
export const POST = async (req: Request) => {
  const body = await req.json();

  const t = await sequelize.transaction();
  let recordsCreated = 0;

  const rows = body[modelConfig.pluralizedModelName];
  for (const item of rows) {
    try {
      await ModelSchema(modelConfig).validate(item);
    } catch (error) {
      return handleSequelizeError(error);
    }
  }

  try {
    for (const item of rows) {
      const primaryKeyValue = item[primaryKeyField];
      if (primaryKeyValue === "") {
        await createModel(modelConfig, item, t);
        recordsCreated++;
      } else {
        await updateModel(modelConfig, item, primaryKeyValue, t);
      }
    }

    await t.commit();

    return NextResponse.json({
      recordsCreated,
    });
  } catch (err) {
    await t.rollback();
    return handleSequelizeError(err);
  }
};
